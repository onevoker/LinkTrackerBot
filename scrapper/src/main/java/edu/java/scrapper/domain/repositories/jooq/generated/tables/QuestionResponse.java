/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.domain.repositories.jooq.generated.tables;

import edu.java.scrapper.domain.repositories.jooq.generated.DefaultSchema;
import edu.java.scrapper.domain.repositories.jooq.generated.Keys;
import edu.java.scrapper.domain.repositories.jooq.generated.tables.records.QuestionResponseRecord;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class QuestionResponse extends TableImpl<QuestionResponseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>QUESTION_RESPONSE</code>
     */
    public static final QuestionResponse QUESTION_RESPONSE = new QuestionResponse();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<QuestionResponseRecord> getRecordType() {
        return QuestionResponseRecord.class;
    }

    /**
     * The column <code>QUESTION_RESPONSE.QUESTION_ID</code>.
     */
    public final TableField<QuestionResponseRecord, Long> QUESTION_ID =
        createField(DSL.name("QUESTION_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>QUESTION_RESPONSE.LINK_ID</code>.
     */
    public final TableField<QuestionResponseRecord, Long> LINK_ID =
        createField(DSL.name("LINK_ID"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>QUESTION_RESPONSE.ANSWERED</code>.
     */
    public final TableField<QuestionResponseRecord, Boolean> ANSWERED =
        createField(DSL.name("ANSWERED"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>QUESTION_RESPONSE.ANSWER_COUNT</code>.
     */
    public final TableField<QuestionResponseRecord, Long> ANSWER_COUNT =
        createField(DSL.name("ANSWER_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>QUESTION_RESPONSE.LAST_ACTIVITY_DATE</code>.
     */
    public final TableField<QuestionResponseRecord, OffsetDateTime> LAST_ACTIVITY_DATE =
        createField(DSL.name("LAST_ACTIVITY_DATE"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private QuestionResponse(Name alias, Table<QuestionResponseRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionResponse(Name alias, Table<QuestionResponseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>QUESTION_RESPONSE</code> table reference
     */
    public QuestionResponse(String alias) {
        this(DSL.name(alias), QUESTION_RESPONSE);
    }

    /**
     * Create an aliased <code>QUESTION_RESPONSE</code> table reference
     */
    public QuestionResponse(Name alias) {
        this(alias, QUESTION_RESPONSE);
    }

    /**
     * Create a <code>QUESTION_RESPONSE</code> table reference
     */
    public QuestionResponse() {
        this(DSL.name("QUESTION_RESPONSE"), null);
    }

    public <O extends Record> QuestionResponse(Table<O> child, ForeignKey<O, QuestionResponseRecord> key) {
        super(child, key, QUESTION_RESPONSE);
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    @NotNull
    public UniqueKey<QuestionResponseRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D3;
    }

    @Override
    @NotNull
    public List<UniqueKey<QuestionResponseRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_D39);
    }

    @Override
    @NotNull
    public List<ForeignKey<QuestionResponseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONSTRAINT_D);
    }

    private transient Link _link;

    /**
     * Get the implicit join path to the <code>PUBLIC.LINK</code> table.
     */
    public Link link() {
        if (_link == null) {
            _link = new Link(this, Keys.CONSTRAINT_D);
        }

        return _link;
    }

    @Override
    @NotNull
    public QuestionResponse as(String alias) {
        return new QuestionResponse(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public QuestionResponse as(Name alias) {
        return new QuestionResponse(alias, this);
    }

    @Override
    @NotNull
    public QuestionResponse as(Table<?> alias) {
        return new QuestionResponse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public QuestionResponse rename(String name) {
        return new QuestionResponse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public QuestionResponse rename(Name name) {
        return new QuestionResponse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public QuestionResponse rename(Table<?> name) {
        return new QuestionResponse(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row5<Long, Long, Boolean, Long, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super Boolean, ? super Long, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(
        Class<U> toType,
        Function5<? super Long, ? super Long, ? super Boolean, ? super Long, ? super OffsetDateTime, ? extends U> from
    ) {
        return convertFrom(toType, Records.mapping(from));
    }
}
